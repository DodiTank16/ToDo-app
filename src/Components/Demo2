import * as React from "react";
import { Button, Grid, Paper, TextField } from "@mui/material";
import { useForm } from "react-hook-form";
import { Controller, useFormContext, FormProvider } from "react-hook-form";

const FormFieldController = ({
  component: Component = TextField,
  name = "",
  defaultValue = "",
  label = "",
  validation = {},
  required = false,
  valueProp = "value",
  callbackProp = "onChange",
  onChange,
  ...rest
}) => {
  const { control } = useFormContext();

  return (
    <Controller
      name={name}
      control={control}
      defaultValue={defaultValue}
      rules={validation}
      render={({
        field: { onChange: internalOnChange, value, ref },
        fieldState: { error }
      }) => {
        const pipes = {
          [valueProp]: value,
          [callbackProp]: function () {
            internalOnChange.apply(this, arguments);

            // Middleman callback to allow for onChange back to the caller, if needed
            if (onChange) {
              onChange.apply(this, arguments);
            }
          }
        };
        return (
          <>
            <Component
              id={name}
              inputRef={ref}
              caption={error ? error?.message : ""}
              label={label}
              {...pipes}
              {...rest}
            />
          </>
        );
      }}
    />
  );
};

export default function BasicButtons() {
  const { handleSubmit, ...methods } = useForm();

  const handleData = (data) => {
    console.log("data", data);
  };

  return (
    <>
      <Paper
        style={{ margin: "10px auto", textAlign: "center" }}
        elevation={24}
      >
        <h1 style={{ textAlign: "center" }}>Todo Application</h1>
        <FormProvider {...methods}>
          <form onSubmit={handleSubmit(handleData)}>
            <Grid
              style={{ margin: "10px" }}
              container
              spacing={1}
              direction="column"
            >
              <Grid item xs={6}>
                <FormFieldController
                  name="title"
                  label="Title"
                  variant="standard"
                  // Removed handelInputChange as you don't need it for form submission
                />
                <FormFieldController
                  name="desc"
                  label="Description"
                  variant="standard"
                />
                <FormFieldController
                  name="priority"
                  type="number"
                  label="Priority"
                  variant="standard"
                />
              </Grid>
            </Grid>
            <Button type="submit" variant="contained" color="primary">
              Add
            </Button>
          </form>
        </FormProvider>
      </Paper>
    </>
  );
}
